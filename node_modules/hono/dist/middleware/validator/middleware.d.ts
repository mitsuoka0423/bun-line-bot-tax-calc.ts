import type { Context } from '../../context';
import type { Environment, MiddlewareHandler } from '../../types';
import type { Schema } from '../../validator/schema';
import type { ValidateResult } from '../../validator/validator';
import { Validator } from '../../validator/validator';
declare type ResultSet = {
    hasError: boolean;
    messages: string[];
    results: ValidateResult[];
};
declare type Done<P extends string, E extends Partial<Environment> = Environment> = (resultSet: ResultSet, c: Context<P, E>) => Response | void;
declare type ValidationFunction<P extends string, E extends Partial<Environment> = Environment, S extends Schema = Schema> = (v: Validator, c: Context<P, E>) => S;
export declare const validatorMiddleware: <P extends string, E extends Partial<Environment> = Environment, S extends Schema = Schema>(validationFunction: ValidationFunction<P, E, S>, options?: {
    done?: Done<P, E> | undefined;
} | undefined) => MiddlewareHandler<string, E, S>;
export {};
