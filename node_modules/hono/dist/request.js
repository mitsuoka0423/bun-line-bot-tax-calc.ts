// src/request.ts
import { parseBody } from "./utils/body.js";
import { parse } from "./utils/cookie.js";
import { getQueryStringFromURL } from "./utils/url.js";
function extendRequestPrototype() {
  if (!!Request.prototype.param) {
    return;
  }
  Request.prototype.param = function(key) {
    if (this.paramData) {
      if (key) {
        return decodeURIComponent(this.paramData[key]);
      } else {
        const decoded = {};
        for (const [key2, value] of Object.entries(this.paramData)) {
          decoded[key2] = decodeURIComponent(value);
        }
        return decoded;
      }
    }
    return null;
  };
  Request.prototype.header = function(name) {
    if (!this.headerData) {
      this.headerData = {};
      this.headers.forEach((value, key) => {
        this.headerData[key] = value;
      });
    }
    if (name) {
      return this.headerData[name.toLowerCase()];
    } else {
      return this.headerData;
    }
  };
  Request.prototype.query = function(key) {
    const queryString = getQueryStringFromURL(this.url);
    const searchParams = new URLSearchParams(queryString);
    if (!this.queryData) {
      this.queryData = {};
      for (const key2 of searchParams.keys()) {
        this.queryData[key2] = searchParams.get(key2) || "";
      }
    }
    if (key) {
      return this.queryData[key];
    } else {
      return this.queryData;
    }
  };
  Request.prototype.queries = function(key) {
    const queryString = getQueryStringFromURL(this.url);
    const searchParams = new URLSearchParams(queryString);
    if (key) {
      return searchParams.getAll(key);
    } else {
      const result = {};
      for (const key2 of searchParams.keys()) {
        result[key2] = searchParams.getAll(key2);
      }
      return result;
    }
  };
  Request.prototype.cookie = function(key) {
    const cookie = this.headers.get("Cookie") || "";
    const obj = parse(cookie);
    if (key) {
      const value = obj[key];
      return value;
    } else {
      return obj;
    }
  };
  Request.prototype.parseBody = async function() {
    let body;
    if (!this.bodyData) {
      body = await parseBody(this);
      this.bodyData = body;
    } else {
      body = this.bodyData;
    }
    return body;
  };
  Request.prototype.json = async function() {
    let jsonData;
    if (!this.jsonData) {
      jsonData = JSON.parse(await this.text());
      this.jsonData = jsonData;
    } else {
      jsonData = this.jsonData;
    }
    return jsonData;
  };
  Request.prototype.valid = function(keys, value) {
    var _a;
    if (!this.data) {
      this.data = {};
    }
    if (keys !== void 0) {
      if (typeof keys === "string") {
        keys = [keys];
      }
      let data = this.data;
      for (let i = 0; i < keys.length - 1; i++) {
        data = data[_a = keys[i]] || (data[_a] = {});
      }
      data[keys[keys.length - 1]] = value;
    }
    return this.data;
  };
}
export {
  extendRequestPrototype
};
