import type { Router } from './router';
import type { ExecutionContext } from './types';
import type { Handler, Environment, ParamKeys, ErrorHandler, NotFoundHandler } from './types';
import type { Schema } from './validator/schema';
interface HandlerInterface<P extends string, E extends Partial<Environment>, S extends Partial<Schema>, U = Hono<E, P, S>> {
    <Path extends string, Data extends Schema>(...handlers: Handler<ParamKeys<Path> extends never ? string : ParamKeys<Path>, E, Data>[]): U;
    (...handlers: Handler<string, E, S>[]): U;
    <Path extends string, Data extends Partial<Schema> = Schema>(path: Path, ...handlers: Handler<ParamKeys<Path> extends never ? string : ParamKeys<Path>, E, Data>[]): U;
    <Path extends string, Data extends Schema>(path: Path, ...handlers: Handler<string, E, Data>[]): U;
    (path: string, ...handlers: Handler<string, E, S>[]): U;
}
interface Route<P extends string = string, E extends Partial<Environment> = Environment, S extends Partial<Schema> = Schema> {
    path: string;
    method: string;
    handler: Handler<P, E, S>;
}
declare const Hono_base: new <E_1 extends Partial<Environment> = Environment, P_1 extends string = string, S_1 extends Partial<Schema> = Schema, U = Hono<E_1, P_1, S_1>>() => {
    get: HandlerInterface<P_1, E_1, S_1, U>;
    all: HandlerInterface<P_1, E_1, S_1, U>;
    post: HandlerInterface<P_1, E_1, S_1, U>;
    put: HandlerInterface<P_1, E_1, S_1, U>;
    delete: HandlerInterface<P_1, E_1, S_1, U>;
    head: HandlerInterface<P_1, E_1, S_1, U>;
    options: HandlerInterface<P_1, E_1, S_1, U>;
    patch: HandlerInterface<P_1, E_1, S_1, U>;
};
export declare class Hono<E extends Partial<Environment> = Environment, P extends string = '/', S extends Partial<Schema> = Schema> extends Hono_base<E, P, S, Hono<E, P, S>> {
    readonly router: Router<Handler<P, E, S>>;
    readonly strict: boolean;
    private _tempPath;
    private path;
    routes: Route<P, E, S>[];
    constructor(init?: Partial<Pick<Hono, 'router' | 'strict'>>);
    private notFoundHandler;
    private errorHandler;
    route(path: string, app?: Hono<any>): this;
    use<Path extends string = string, Data extends Partial<Schema> = Schema>(...middleware: Handler<Path, E, Data>[]): Hono<E, P, S>;
    use<Path extends string = string, Data extends Partial<Schema> = Schema>(arg1: string, ...middleware: Handler<Path, E, Data>[]): Hono<E, P, S>;
    on(method: string, path: string, ...handlers: Handler<P, E, S>[]): this;
    onError(handler: ErrorHandler<E>): this;
    notFound(handler: NotFoundHandler<E>): this;
    showRoutes(): void;
    private addRoute;
    private matchRoute;
    private handleError;
    private dispatch;
    handleEvent: (event: FetchEvent) => Response | Promise<Response>;
    fetch: (request: Request, Environment?: E['Bindings'], executionCtx?: ExecutionContext) => Response | Promise<Response>;
    request: (input: Request | string, requestInit?: RequestInit) => Promise<Response>;
}
export {};
